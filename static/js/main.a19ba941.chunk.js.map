{"version":3,"sources":["Pictures.js","AboutMe.js","EntriesData.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","paddingBottom","gridList","width","height","paddingTop","paddingLeft","text","minHeight","title","position","zIndex","img","Pictures","props","classes","className","GridList","cellHeight","cols","alignItems","link","map","tile","GridListTile","key","src","alt","description","AboutMe","entries","name","App","to","path","ProjectsPage","AboutMePage","id","entry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a19ba941.chunk.js","sourcesContent":["import React from 'react';\nimport './Pictures.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    paddingBottom: 100\n  },\n  gridList: {\n    width: 750,\n    height: 1000,\n    paddingTop: 100,\n    paddingLeft: 100,\n  },\n  text:{\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    minHeight: 1000,\n  },\n  title:{\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    position: \"absolute\",\n    zIndex: 1\n  },\n  img:{\n    height: 1000,\n  }\n}));\nexport default function Pictures(props) {\n  const classes = useStyles(); \n    return(\n      <div className={classes.root}>\n        {/* <div className={classes.title}>{props.name}</div> */}\n        <GridList cellHeight={750}className={classes.gridList} cols={1} alignItems=\"flex-end\">\n          {props.link.map((tile) => (\n            <GridListTile key={tile} cols={tile.cols || 1}>\n                  <img src={tile} alt={tile}/>\n            </GridListTile>\n          ))}\n          <div className={classes.text}>{props.description}</div>\n        </GridList>\n        \n      </div>\n    )\n}\n\n","import React from 'react';\nimport './AboutMe.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    paddingBottom: 100\n  },\n  gridList: {\n    width: 750,\n    height: 1000,\n    paddingTop: 100,\n    paddingLeft: 100,\n  },\n  text:{\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    minHeight: 1000,\n  },\n  title:{\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    position: \"absolute\",\n    zIndex: 1\n  },\n  img:{\n    height: 1000,\n    width: 1\n  }\n}));\nexport default function AboutMe(props) {\n  const classes = useStyles(); \n    return(\n      <div className={classes.root}>\n          \n        <GridList cellHeight={750}className={classes.gridList} cols={1} alignItems=\"flex-end\">\n            <GridListTile key={\"text-about-me\"} cols={1 || 1}>\n                <div className={classes.text}>\n                  Hello and welcome to my portfolio! A congregation of my experiences and thoughts. I'm a graduate from Washington University in St. Louis with a BS in Computer Science.\n                I bring a unique role to every team I am apart of: having technical experience from a Computer Science degree, but also having the human centered design and creative problem solving experience gained from my work. HCD and creative problem solving have been a key portion of my education and experiences.\n                My goal is to cater to user experience and accessibility above all else.\n                </div>\n            </GridListTile>\n        </GridList>\n          \n        \n      </div>\n    )\n}\n\n","export const entries = [\n    {\n      name: \"Discord Elo Bot\",\n      description: \"A discord bot aimed at tracking 'ratings' or 'elo' in online seasonal competitions. This is a passion project that started as a discussion between users on a Magic the Gathering(MTG) Discord Server. With the recent quarantine, people are unable to leave their homes to play MTG at their local card stores. With this, the MTG community has taken the online Discord Servers by storm. They have created competitive enviornments where users play online, and then 'log' them with the help of a Discord Bot. Wins and losses raise and lower your online 'score' respectively. Many issues were discovered with the current bot used on this server. These include and not limited to: restrictions, direct contact to the developer and user experiences being ignored. From this, a core group of designers, led by myself were assembled tocreate a new bot. With closed beta expected September 1st, we are aiming to expand to the greater magic community soon after. While in the development stage, the bot is being worked on by a few developers led by myself. As we reach our initial release, it will become an open sourced project with the hopes of including the community.\",\n      link: [\n        'https://noahsaldanadesign.com/img/Discord%20Bot.png',\n        \"https://noahsaldanadesign.com/img/Discord%20Bot2.png\",\n        \"https://noahsaldanadesign.com/img/Discord%20Bot3.png\",\n        \"https://noahsaldanadesign.com/img/MongoDB.png\"\n      ],\n    },\n    {\n      name: \"Discord Elo Bot2\",\n      description: \"'NuVu is a full-time innovation school for middle and high school students. NuVuâ€™s pedagogy is based on the architectural Studio model and geared around multi-disciplinary, collaborative projects. We teach students how to navigate the messiness of the creative process, from inception to completion by prototyping and testing.'\\\n      Projects range greatly at NuVu, and I've had my fair share of them. From Aerial Filmmaking to Drone Assembly to RC Cars to AR Games to Battlebots, I have learned valuable design thinking, teaching and technical skills that have rounded out my classroom learning and proven extremely useful in my own projects.\\\n      Throughout my three summers working at NuVu, I taught, mentored, and helped foster growth in elementary and middle school boys and girls. Beyond the outward face of NuVu as a design and engineering enviornment, there is so much value in the lessons and experiences instilled into these children. Boys and girls leave with a greater understanding of how to approach and combat problems they face every day. From prototyping to design thinking, there's something for everyone here.\",\n      link: [\n        \"https://noahsaldanadesign.com/img/IMG_3177.jpg\",\n      ],\n    },\n    {\n      name: \"Discord Elo Bot3\",\n      description: \"Magic the Gathering Manager (MTGM) is a life tracking app for the popular card game Magic the Gathering. As frequent players, my friends and I were aware of similar products on the market. Many of these apps had underlining problems ranging from paid, easy to implement, features to bad coding which led to bugs and glitches.\\\n      MTGM was born from this. It is a solo passion project I developed during my Senior Year in college to combat the issues I had with similar apps. With close help from my college advisor (a professor of Swift and iOS development), I quickly became addicted to working on this project in between my classes. From conception to completition, the app was up on the Store in 3 months and taught me greatly about the submitting process, and, more importantly, the value of iteration and drawings.\\\n      Since its creation, I have completed two major updates to the app. In the future, I hope to return and add more using my new knowledge of Swift and Xcode\",\n      link: [\n        \"https://noahsaldanadesign.com/img/DMhomeicon.png\",\n        \"https://noahsaldanadesign.com/img/MTGM%20in%20Store.png\"\n      ]\n    },\n  ]","import React from 'react';\nimport {Component} from 'react';\nimport Pictures from \"./Pictures\"\nimport AboutMe from \"./AboutMe\"\nimport './App.css';\nimport { entries } from './EntriesData.js'\nimport { Navbar, NavDropdown, Nav, Form, FormControl, Button } from 'react-bootstrap';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    paddingBottom: 100\n  },\n  gridList: {\n    width: 500,\n    height: 775,\n  },\n}));\n\nconst App = () =>{\n    const classes = useStyles(); \n    return (\n          <Router>\n            <p>\n              <section className = \"Welcome-text\">\n                <h1><strong>Hey, I'm Noah SaldaÃ±a</strong></h1>\n                <section className = \"Welcome-sub\">\n                  <p>iOS Developer - Student Mentor - Human-Centered Designer</p>\n                </section>\n                <section className = \"Nav\">\n                  <Link to=\"/projects\">Projects</Link>\n                  <Link to=\"/aboutme\">About Me</Link>\n                </section>\n                <section>\n                  <GridList cellHeight={750} className={classes.gridList} cols={1} alignItems=\"flex-end\">\n                    <GridListTile key={\"test\"} cols={1 || 1}>\n                          <img src={\"https://noahsaldanadesign.com/img/IMG_3958.jpg\"} alt={\"test\"}/>\n                    </GridListTile>\n                  </GridList>\n                </section>\n              </section>\n            </p>\n            <Switch>\n              <Route path=\"/projects\">\n                <ProjectsPage />\n              </Route>\n              <Route path=\"/aboutme\">\n                <AboutMePage />\n              </Route>\n            </Switch>\n        </Router>\n    );\n}\nexport default App;\n\nfunction ProjectsPage() {\n  return <div className=\"App\">\n  <header className=\"App-header\">\n    <section id = \"Pictures\">\n    \n      {entries.map((entry)=>(\n        <Pictures\n        key = {entry.name}\n        name = {entry.name}\n        link = {entry.link}\n        description = {entry.description}\n        />\n      ))}\n    </section>\n  </header>\n  </div>;\n}\n\nfunction AboutMePage() {\n  return <div>\n    <AboutMe />\n  </div>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}